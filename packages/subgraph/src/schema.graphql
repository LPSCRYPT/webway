type Purpose @entity {
  id: ID!
  sender: Sender!
  purpose: String!
  createdAt: BigInt!
  transactionHash: String!
}

type Sender @entity {
  id: ID!
  address: Bytes!
  purposes: [Purpose!] @derivedFrom(field: "sender")
  createdAt: BigInt!
  purposeCount: BigInt!
}

type Owner @entity {
  id: ID!
  own: Boolean!
}

type ActiveEffect @entity {
  id: ID!
  tokenId: ID!
  key: String!
  uri: String!
  active: Boolean!
}

type TokenURI @entity {
  id: ID!
  uri: String!
}

# type All @entity {
#   id: ID!
#   numTokenContracts: BigInt!
#   numTokens: BigInt!
#   numOwners: BigInt!
# }

# type Token @entity {
#   id: ID!
#   contract: TokenContract!
#   tokenID: BigInt!
#   owner: Owner!
#   mintTime: BigInt!
#   tokenURI: String!
# }

# type TokenContract @entity {
#   id: ID!
#   name: String
#   symbol: String
#   doAllAddressesOwnTheirIdByDefault: Boolean!
#   supportsEIP721Metadata: Boolean!
#   tokens: [Token!]! @derivedFrom(field: "contract")
#   numTokens: BigInt!
#   numOwners: BigInt!
# }

# type Owner @entity {
#   id: ID!
#   tokens: [Token!]! @derivedFrom(field: "owner")
#   numTokens: BigInt!
# }

# type OwnerPerTokenContract @entity {
#   id: ID!
#   owner: Owner!
#   contract: TokenContract!
#   numTokens: BigInt!
# }
